// monitor-luzhniki.js
// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–∞ tennis.luzhniki.ru ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ª–æ—Ç–∞—Ö
// –ü—Ä–∏ DUMP_ALL=1 –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

import fs from 'fs';
import { chromium } from 'playwright';
import fetch from 'node-fetch';

// -------------------------
// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è
// -------------------------
const TG_BOT_TOKEN = process.env.TG_BOT_TOKEN;
const TG_CHAT_ID = process.env.TG_CHAT_ID;
const PROXY_LIST = (process.env.PROXY_LIST || '').split(/\r?\n/).filter(Boolean);
const DUMP_ALL = process.env.DUMP_ALL === '1'; // —Ä–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚Äî —à–ª—ë—Ç –≤—Å–µ —Å–ª–æ—Ç—ã

// -------------------------
// –£—Ç–∏–ª–∏—Ç—ã
// -------------------------
const sleep = (ms) => new Promise(r => setTimeout(r, ms));

async function sendTelegram(text) {
  const url = `https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage`;
  const body = { chat_id: TG_CHAT_ID, text };
  const res = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(body)
  });
  if (!res.ok) throw new Error(`Telegram error ${res.status}`);
}

function log(msg) {
  console.log(`[${new Date().toISOString()}] ${msg}`);
}

// -------------------------
// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
// -------------------------
const DAY_SHORT = ['–í—Å','–ü–Ω','–í—Ç','–°—Ä','–ß—Ç','–ü—Ç','–°–±'];

function formatFullReport(slotsByDay) {
  const lines = ['–ü–û–õ–ù–´–ô –û–¢–ß–Å–¢ –õ–£–ñ–ù–ò–ö–ò!'];
  const items = Array.from(
    (slotsByDay instanceof Map ? slotsByDay.values() : Object.values(slotsByDay))
  ).sort((a,b) => a.date - b.date);

  for (const d of items) {
    const dt = d.date instanceof Date ? d.date : new Date(d.date);
    const day = DAY_SHORT[dt.getDay()];
    const dd  = String(dt.getDate()).padStart(2,'0');
    const mm  = String(dt.getMonth()+1).padStart(2,'0');
    const label = `${day} ${dd}.${mm}`;
    const times = (d.times && d.times.length) ? d.times.join(', ') : '‚Äî';
    lines.push(`${label}: ${times} (${d.times.length} —Å–ª–æ—Ç–æ–≤)`);
  }
  lines.push('', 'https://tennis.luzhniki.ru/#courts');
  return lines.join('\n');
}

function formatNewSlots(newSlots) {
  const lines = ['–ù–û–í–´–ï –°–õ–û–¢–´ –õ–£–ñ–ù–ò–ö–ò!'];
  for (const d of newSlots) {
    const dt = new Date(d.date);
    const day = DAY_SHORT[dt.getDay()];
    const dd = String(dt.getDate()).padStart(2, '0');
    const mm = String(dt.getMonth() + 1).padStart(2, '0');
    const label = `${day} ${dd}.${mm}`;
    const times = d.times.join(', ');
    lines.push(`${label}: ${times}`);
  }
  lines.push('', 'https://tennis.luzhniki.ru/#courts');
  return lines.join('\n');
}

// -------------------------
// –†–∞–±–æ—Ç–∞ —Å –±—Ä–∞—É–∑–µ—Ä–æ–º
// -------------------------
async function withBrowser(proxy, fn) {
  const browser = await chromium.launch({
    headless: true,
    proxy: proxy ? { server: `http://${proxy}` } : undefined,
  });
  const page = await browser.newPage();
  try {
    return await fn(page);
  } finally {
    await browser.close();
  }
}

async function scrapeLuzhniki(page) {
  log('–û—Ç–∫—Ä—ã–≤–∞–µ–º https://tennis.luzhniki.ru/#courts');
  await page.goto('https://tennis.luzhniki.ru/#courts', {
    timeout: 60000,
    waitUntil: 'domcontentloaded'
  });

  await page.waitForSelector('.react-calendar', { timeout: 10000 }).catch(() => {});
  await sleep(2000);

  const data = await page.evaluate(() => {
    const result = [];
    const days = document.querySelectorAll('.react-calendar__tile');
    days.forEach(day => {
      const dateAttr = day.getAttribute('aria-label');
      if (!dateAttr) return;
      const date = new Date(dateAttr);
      const times = Array.from(day.querySelectorAll('.time-slot')).map(e => e.textContent.trim());
      if (times.length) result.push({ date, times });
    });
    return result;
  });

  log(`–ù–∞–π–¥–µ–Ω–æ ${data.length} –¥–Ω–µ–π —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏.`);
  return data;
}

// -------------------------
// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
// -------------------------
async function main() {
  let proxyToUse = null;
  if (PROXY_LIST.length) {
    proxyToUse = PROXY_LIST[Math.floor(Math.random() * PROXY_LIST.length)];
    log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: ${proxyToUse}`);
  }

  const slots = await withBrowser(proxyToUse, scrapeLuzhniki);

  const saveFile = 'slots.json';
  let oldSlots = [];
  if (fs.existsSync(saveFile)) {
    oldSlots = JSON.parse(fs.readFileSync(saveFile, 'utf8'));
  }

  const groupByDay = {};
  for (const s of slots) {
    const key = new Date(s.date).toDateString();
    if (!groupByDay[key]) groupByDay[key] = { date: s.date, times: [] };
    groupByDay[key].times.push(...s.times);
  }

  // üîç –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚Äî —à–ª—ë–º –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç
  if (DUMP_ALL) {
    await sendTelegram(formatFullReport(groupByDay));
    return;
  }

  const oldKeys = new Set(oldSlots.map(s => `${s.date}-${s.times.join(',')}`));
  const newOnes = slots.filter(s => !oldKeys.has(`${s.date}-${s.times.join(',')}`));

  if (newOnes.length) {
    log(`–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤: ${newOnes.length}`);
    await sendTelegram(formatNewSlots(newOnes));
    fs.writeFileSync(saveFile, JSON.stringify(slots, null, 2));
  } else {
    log('–ù–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç.');
  }
}

// -------------------------
main().catch(e => {
  console.error('–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', e);
  process.exit(1);
});
