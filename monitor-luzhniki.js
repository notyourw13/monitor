// --- Luzhniki Monitor vFinal (robust slots) ---
import playwright from 'playwright';
import fetch from 'node-fetch';
import proxyChain from 'proxy-chain';
import httpProxyAgentPkg from 'http-proxy-agent';
import httpsProxyAgentPkg from 'https-proxy-agent';
import socksProxyAgentPkg from 'socks-proxy-agent';

const { chromium } = playwright;
const { HttpProxyAgent }  = httpProxyAgentPkg;
const { HttpsProxyAgent } = httpsProxyAgentPkg;
const { SocksProxyAgent } = socksProxyAgentPkg;

const TARGET_URL   = 'https://tennis.luzhniki.ru/';
const TG_BOT_TOKEN = process.env.TG_BOT_TOKEN || '';
const TG_CHAT_ID   = process.env.TG_CHAT_ID   || '';
const PROXY_LIST   = (process.env.PROXY_LIST || '').trim();

const log = (...a) => console.log(new Date().toISOString(), ...a);

// ---------- proxy utils ----------
function parseProxyLine(line) {
  const s = line.trim();
  if (!s) return null;
  if (s.startsWith('http://') || s.startsWith('https://') || s.startsWith('socks5://')) return s;
  if (/^\d+\.\d+\.\d+\.\d+:\d+$/.test(s)) return 'http://' + s;
  return s;
}
function buildFetchAgent(proxyUrl) {
  if (!proxyUrl) return undefined;
  if (proxyUrl.startsWith('http://') || proxyUrl.startsWith('https://')) {
    return proxyUrl.startsWith('https://')
      ? new HttpsProxyAgent(proxyUrl)
      : new HttpProxyAgent(proxyUrl);
  }
  if (proxyUrl.startsWith('socks5://')) return new SocksProxyAgent(proxyUrl);
}
async function testProxyReachable(proxyUrl) {
  const agent = buildFetchAgent(proxyUrl);
  const controller = new AbortController();
  const t = setTimeout(() => controller.abort(), 6000);
  try {
    const r = await fetch('https://ifconfig.me/all.json', { agent, signal: controller.signal });
    clearTimeout(t);
    if (!r.ok) throw new Error('status ' + r.status);
    const j = await r.json();
    return j.ip_addr || 'ok';
  } catch (e) {
    clearTimeout(t);
    throw e;
  }
}

// ---------- telegram ----------
async function sendTelegram(text) {
  if (!TG_BOT_TOKEN || !TG_CHAT_ID) {
    log('TG creds missing; printing message:\n' + text);
    return;
  }
  const url = `https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage`;
  const r = await fetch(url, {
    method: 'POST',
    headers: { 'content-type': 'application/json' },
    body: JSON.stringify({ chat_id: TG_CHAT_ID, text, disable_web_page_preview: true }),
  });
  if (!r.ok) {
    const body = await r.text().catch(() => '');
    throw new Error('Telegram error ' + r.status + ' ' + body);
  }
}

// ---------- browser ----------
async function launchBrowserWithProxy(rawProxy) {
  let browserProxy = null;
  if (rawProxy) {
    browserProxy = rawProxy.startsWith('socks5://')
      ? await proxyChain.anonymizeProxy(rawProxy)
      : rawProxy;
  }
  const browser = await chromium.launch({
    headless: true,
    proxy: browserProxy ? { server: browserProxy } : undefined,
  });
  return { browser, browserProxy };
}

// ---------- scraping ----------
async function scrapeSlots(page) {
  log('‚åõ –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ ¬´–ê—Ä–µ–Ω–¥–∞ –∫—Ä—ã—Ç—ã—Ö –∫–æ—Ä—Ç–æ–≤¬ª');
  await page.waitForSelector('text=–ê—Ä–µ–Ω–¥–∞ –∫—Ä—ã—Ç—ã—Ö –∫–æ—Ä—Ç–æ–≤', { timeout: 20000 });
  await page.locator('text=–ê—Ä–µ–Ω–¥–∞ –∫—Ä—ã—Ç—ã—Ö –∫–æ—Ä—Ç–æ–≤').first().click({ timeout: 3000 });
  log('‚úÖ –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ ¬´–ê—Ä–µ–Ω–¥–∞ –∫—Ä—ã—Ç—ã—Ö –∫–æ—Ä—Ç–æ–≤¬ª');

  // ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª
  const contBtn = page.locator('button:has-text("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")').first();
  if (await contBtn.isVisible().catch(() => false)) {
    await contBtn.click({ timeout: 5000 });
  } else {
    await page.locator('text=–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å').first().click({ timeout: 5000 }).catch(() => {});
  }
  log('‚úÖ –ù–∞–∂–∞–ª–∏ ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª');

  // –Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–∏–¥–∞—Ç–µ–ª—å –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  await page.waitForTimeout(1200);

  // –ë–µ—Ä—ë–º –ø–æ–±–æ–ª—å—à–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –¥–Ω–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ ¬´—á–∏—Å—Ç–æ–º—É —á–∏—Å–ª—É¬ª
  const dayButtons = await page.locator('button:nth-child(n), [role="button"]').all();
  log('üìÖ –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫-–¥–Ω–µ–π:', dayButtons.length);

  const result = {};

  for (let i = 0; i < dayButtons.length; i++) {
    const btn = dayButtons[i];
    const label = (await btn.innerText().catch(() => '')).trim();
    if (!/^\d{1,2}$/.test(label)) continue;

    log('üóì –î–µ–Ω—å', label, '‚Äî –∫–ª–∏–∫–∞–µ–º');
    await btn.scrollIntoViewIfNeeded().catch(() => {});
    await btn.click({ timeout: 3000 }).catch(() => {});
    // –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç –∫—É—Å–∫–∏ ‚Äî –¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Ä–∏—Å–æ–≤–∞—Ç—å—Å—è
    await page.waitForTimeout(800);

    // —Å–ª–µ–≥–∫–∞ –ø—Ä–æ—Å–∫—Ä–æ–ª–ª–∏–º, —á—Ç–æ–±—ã –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å ¬´–í–µ—á–µ—Ä¬ª –∏ —Ç.–ø.
    await page.evaluate(() => window.scrollBy(0, Math.round(window.innerHeight * 0.5)));
    await page.waitForTimeout(200);

    // –∂–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ HH:MM (–¥–æ 3.5—Å)
    await page.waitForFunction(() => {
      const re = /^\s*\d{1,2}:\d{2}\s*$/;
      // —ç–ª–µ–º–µ–Ω—Ç—ã c CSS-–º–æ–¥—É–ª—å–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏ —Å–ª–æ—Ç–æ–≤
      const els = document.querySelectorAll('[class^="time-slot-module__slot__"], [class*="time-slot-module__slot__"]');
      for (const el of els) if (re.test(el.textContent || '')) return true;
      // fallback: –ª—é–±–æ–π —Ç–µ–∫—Å—Ç HH:MM –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
      return re.test(document.body.innerText || '');
    }, { timeout: 3500 }).catch(() => {});

    // —Å–æ–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–∞: –∏ –ø–æ –∫–ª–∞—Å—Å–∞–º, –∏ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É
    const times = await page.evaluate(() => {
      const acc = new Set();
      const re = /^\s*(\d{1,2}):(\d{2})\s*$/;

      // 1) CSS-–º–æ–¥—É–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã
      document.querySelectorAll('[class^="time-slot-module__slot__"], [class*="time-slot-module__slot__"]')
        .forEach(el => {
          const t = (el.textContent || '').trim();
          const m = t.match(re);
          if (m) acc.add(m[1].padStart(2, '0') + ':' + m[2]);
        });

      // 2) –¢–µ–∫—Å—Ç–æ–≤—ã–µ —É–∑–ª—ã HH:MM –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
      // (–±–µ—Ä—ë–º –Ω–µ –≤–µ—Å—å body.innerText, –∞ —ç–ª–µ–º–µ–Ω—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –ø–æ–π–º–∞—Ç—å –º—É—Å–æ—Ä)
      document.querySelectorAll('button, span, div, li')
        .forEach(el => {
          const t = (el.textContent || '').trim();
          const m = t.match(re);
          if (m) acc.add(m[1].padStart(2, '0') + ':' + m[2]);
        });

      return Array.from(acc).sort();
    });

    if (times.length) {
      result[label] = times;
      log(`‚è∞ –î–µ–Ω—å ${label}:`, times);
    }
  }

  return result;
}

// ---------- main ----------
async function main() {
  const start = Date.now();

  // –ø—Ä–æ–∫—Å–∏
  let chosenProxy = null;
  if (PROXY_LIST) {
    const lines = PROXY_LIST.split(/\r?\n/).map(parseProxyLine).filter(Boolean);
    for (const p of lines) {
      try { await testProxyReachable(p); chosenProxy = p; break; }
      catch { /* –ø–æ–ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π */ }
    }
  }

  const { browser, browserProxy } = await launchBrowserWithProxy(chosenProxy);
  const ctx = await browser.newContext();
  const page = await ctx.newPage();

  log('üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç:', TARGET_URL);
  await page.goto(TARGET_URL, { waitUntil: 'domcontentloaded', timeout: 30000 });

  // –±–∞–Ω–Ω–µ—Ä –Ω–∞ –≥–ª–∞–≤–Ω–æ–π
  const banner = page.locator('text=–ê—Ä–µ–Ω–¥–∞ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤').first();
  await banner.waitFor({ timeout: 15000 });
  await banner.click({ timeout: 3000 });
  log('‚úÖ –ö–ª–∏–∫ –ø–æ –±–∞–Ω–Ω–µ—Ä—É ¬´–ê—Ä–µ–Ω–¥–∞ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤¬ª');

  const all = await scrapeSlots(page);

  // —Å–æ–æ–±—â–µ–Ω–∏–µ
  let text = 'üéæ –¢–ï–ö–£–©–ò–ï –°–õ–û–¢–´ –õ–£–ñ–ù–ò–ö–ò\n\n';
  const dayKeys = Object.keys(all);
  if (!dayKeys.length) {
    text += '(–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)\n\n';
  } else {
    for (const d of dayKeys) text += `üìÖ ${d}\n${all[d].join(', ')}\n\n`;
  }
  text += 'https://tennis.luzhniki.ru/#courts';

  await sendTelegram(text);
  log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');

  await ctx.close();
  await browser.close();
  if (browserProxy?.startsWith('http://127.0.0.1:')) {
    try { await proxyChain.closeAnonymizedProxy(browserProxy, true); } catch {}
  }
  log('‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', ((Date.now() - start) / 1000).toFixed(1) + 's');
}

await main();
